----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 11/20/2023 02:19:14 PM
-- Design Name: 
-- Module Name: TB_avbrottshanterare - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity TB_avbrottshanterare is
--  Port ( );
end TB_avbrottshanterare;

Architecture Behavioral of TB_avbrottshanterare is

    signal sim_done 	: std_logic := '0'; 		-- Signal fÃ¶r att avsluta simuleringen
	signal clk 			: std_logic := '0'; 		-- Klocksignal initieras till 0, det Ã¤r viktigt! Se rad 47!
	signal save_wreg : std_logic := '0';
	signal restore_wreg : std_logic := '1'; --1
	signal ret_addr : std_logic_vector(5 downto 0) --:= "000000";
	signal rst		: std_logic := '0';
	signal int_done 			: std_logic := '0'; 
	signal int0 	 		: std_logic := '0'; 
	signal int_addr :  std_logic_vector(5 downto 0)  --:= "000000";
	signal int_mux : std_logic := '1'; --1
	
	
	constant clk_period : time := 10 ns;			-- konstant signal fÃ¶r en klockperiod

	component avbrottshanterare is	-- Deklarerar en komponent
		port(
		   ret_addr : in std_logic_vector(5 downto 0);
           int_done : in STD_LOGIC;
           clk : in STD_LOGIC;
           rst : in STD_LOGIC;
           int0 : in STD_LOGIC;
           int_addr : out STD_LOGIC_VECTOR(5 downto 0);
           int_mux : out STD_LOGIC;
           save_wreg : out STD_LOGIC;
           restore_wreg : out STD_LOGIC
		);
	end component;
	
begin

DUT_avbrottshanterare: avbrottshanterare	-- Instantierar en komponenent samt kopplar 
	port map(
            ret_addr => ret_addr,
            int_done => int_done,
            clk => clk,
            rst => rst,
            int0 => int0,
            int_addr => int_addr,
            int_mux => int_mux,
            save_wreg => save_wreg,
            restore_wreg => restore_wreg 
            
            );
            
    clk_gen: process		-- Process fÃ¶r att generera en klocksignal
                begin
                        
                    if sim_done = '0' then                 -- Kolla pÃ¥ rad 80. DÃ¤r sÃ¤tts sim_done till 1. Sedan skrivs en kommentar ut i
                        wait for clk_period / 2;         -- terminalfÃ¶nstert, efter det kommer kommandot wait. DÃ¤r slutar simuleringen!        
                        clk <= not clk;            -- Om klocksignalen inte hade varit initierad hade det uppstÃ¥t problem hÃ¤r
                    else
                        wait;
                    end if;
                
                end process;
                
    DUT_stimuli: process	-- Process som skapar simuleringssignaler. 
                    begin
                    
                    ret_addr <= "100111";
                   
                    wait for clk_period;    
                    
                    rst <= '1';  
                    wait for clk_period;          
                    rst <= '0';
                    
                    wait for clk_period; 
                    
                    -- Scenario 0 Idle, inget avbrott sker
                    int0 <= '1';
                    int_done <= '1';
                    ret_addr <= "100111";
                    
                    int0 <= '0';
                    wait for clk_period;
                    
                    -- Scenario 1 Save, spara 
                    int0 <= '1';
                    int_done <= '0';
                    ret_addr <= "001111";
                    
                    wait for clk_period;
                
                    
                    -- Scenario 2 Restore, kör avbrott - efter return till Idle
                    int0 <= '1';
                    int_done <= '0';
                    ret_addr <= "001111";
                    
                    wait for clk_period;
                    int0 <= '0';
                    int_done <= '1';
                    ret_addr <= "100111";
                   
                    wait for clk_period;
                    wait for clk_period;
                    wait for clk_period;
                    wait for clk_period;
                    wait for clk_period;
                    wait for clk_period;
                    
                    
--                    wait for 2*clk_period;
                        
--                    D <= "10111101";
                    
--                    wait for 2*clk_period;
                        
--                    ena      <= '0';
--                    D <= "10100101";
                    
--                    wait for 2*clk_period;
                        
--                    rst <= '0';
                    
--                    wait for 2*clk_period;
                    
--                    wait for 2*clk_period;
--                    D <= "00110000";
--                    save_wreg <= '1';
                    
--                    wait for 2*clk+_period;
--                    restore_wreg <= '1';
--                    save_wreg <= '1';
                        
--                    wait for 2*clk_period;
                        
                    sim_done <= '1';
                    report "Simulation done! :)" severity note;
                    wait;
                    end process;

end Behavioral;
